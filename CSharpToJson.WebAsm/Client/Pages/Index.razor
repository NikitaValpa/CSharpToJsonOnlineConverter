@page "/"
@using Domain.Models;
@using CSharpToJson.Application.Services
@inject IJSRuntime Js;
@inject ICodeAnalyzer CodeAnalyzer;
@inject IJsonCodeWriter JsonCodeWriter;
@implements IAsyncDisposable

<PageTitle>C# to Json converter</PageTitle>

<!-- Editor -->
<div class="row gx-2 mt-3 ms-2 justify-content-between">
    <div class="col-md-5">
        <p>Your C# code</p>
    </div>
    <div class="col-md-6">
        <p class="text-start">Json output or validation errors</p>
    </div>
</div>

<div id="codeBlock" style="min-height: 350px; max-height: 350px;" class="row">
    <div class="col-md-6">
        <StandaloneCodeEditor Id="floatingTextarea"
                              ConstructionOptions="EditorConstructionOptions"
                              CssClass="border border-2 rounded-3 monaco-padding"
                              @ref="_codeEditor"/>
    </div>

    <div class="border border-2 rounded-3 col-md-6" style="height: 350px; padding-left: 0; padding-right: 0; width: 49.3%" id="output">
        
        <img src="copy.png" alt="Copy to clipboard" 
             style="width: 40px; height: 40px; position: absolute; right: 2%; margin-top: 10px; cursor: pointer;"
             data-bs-toggle="tooltip"
             data-bs-title="Copy to clipboard"
             @onclick="OnCopyToClipboardClick"/>

        <pre style="padding: 0em !important; margin: 0em !important; height: 345px" id="custom-scrollbar" @ref="_jsonCodeBlock">
            @if (!string.IsNullOrEmpty(Model.Json))
            {
            <code class="language-json" id="jsonOutput">@Model.Json</code>
            }
            else
            {
            <code class="language-json" id="jsonOutput">@Model.Errors</code>
            }
        </pre>
    </div>
</div>

<div class="row gx-2 mt-3 justify-content-center">
    <div class="col-auto">
        <button type="submit" @onclick="OnConvertButtonClick" class="btn btn-primary btn-lg">Convert</button>
    </div>
</div>

<!-- Description and example -->
<DescriptionAndExamples/>

@code
{
    private JsonCodeViewModel Model { get; set; } = new ();
    private IJSObjectReference _module;
    private StandaloneCodeEditor _codeEditor;
    private ElementReference _jsonCodeBlock;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await Js.InvokeAsync<IJSObjectReference>("import", "./Pages/Index.razor.js");
        }

        if (!string.IsNullOrEmpty(Model.Json))
        {
            await _module.InvokeVoidAsync("highlightJson", Model.Json);
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "csharp",
                Value = "public class User\r\n" +
                        "{\r\n" +
                        "    public Guid Id { get; set; }\r\n" +
                        "    public string Name { get; set; }\r\n" +
                        "    public int Age { get; set; }\r\n" +
                        "    public DateTime DateOfBirth { get; set; }\r\n" +
                        "    public TimeSpan DelayOfNotify { get; set; }\r\n" +
                        "    public House House { get; set; }\r\n" +
                        "    public Car Car { get; set; }\r\n}\r\n\r\npublic class Car\r\n{\r\n" +
                        "    public string Model { get; set; }\r\n" +
                        "    public string Brand { get; set; }\r\n" +
                        "    public long? Age { get; set; }\r\n" +
                        "}",
                Theme = "vs-dark",
                AriaLabel = "Your c# code"
            };
    }

    public async Task OnCopyToClipboardClick()
    {
        await _module.InvokeVoidAsync("copyToClipboard", _jsonCodeBlock);
    }

    public async Task OnConvertButtonClick(MouseEventArgs args)
    {
        var inputCode = await _codeEditor.GetValue();

        if (string.IsNullOrEmpty(inputCode))
        {
            Model = new JsonCodeViewModel
            {
                Errors = "C# code is empty"
            };
            return;
        }

        var analyzeRes = CodeAnalyzer.Analyze(inputCode);

        if (analyzeRes.error != null)
        {
            Model = new JsonCodeViewModel
            {
                Errors = analyzeRes.error
            };
            return;
        }

        var jsonRes = JsonCodeWriter.Write(analyzeRes.parsedTree);

        if (jsonRes.errors != null)
        {
            Model = new JsonCodeViewModel
                {
                    Errors = jsonRes.errors
                };
            return;
        }

        Model = new JsonCodeViewModel
        {
            Json = await _module.InvokeAsync<string>("stringify", jsonRes.json)
        };
    }

    public async ValueTask DisposeAsync()
    {
        await _module.DisposeAsync();
    }
}
